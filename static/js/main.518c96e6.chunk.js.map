{"version":3,"sources":["components/tile.js","components/gameboard.js","components/App.js","index.js"],"names":["Tile","props","num","this","index","col","actualLoc","row","x","myStyle","marginTop","Math","floor","width","marginLeft","id","className","onClick","style","src","picture","process","React","Component","Gameboard","handleChange","event","target","files","setState","URL","createObjectURL","state","originalLocation","currentLocation","win","start","bind","result","handleClick","locationCheck","swapTiles","checkWin","checkZero","clearPic","count","newCurrent","subArr","indexArr","localStorage","getItem","split","i","rows","j","columns","push","Number","setItem","length","zero","poss","move","random","toString","bottomMove","loc","location","y","posibilities","zeroLoc","moves","one","two","check","current","temp","zeroLocation","alert","UncontrolledAlert","color","fade","type","onChange","map","rIndex","column","cIndex","key","Button","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.518c96e6.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css';\n\n\nexport default class Tile extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    render() {\n\n        const num = this.props.index\n        const col = this.props.col\n        const row = this.props.row\n        const actualLoc = { row, col }\n        let x =num % 4\n        let y = Math.floor(num/this.props.width)\n        const imgY = y * -100\n        const imgX = x * -100\n        const myStyle = {\n            marginTop: imgY,\n            marginLeft: imgX\n        }\n        return (\n            <div\n                id={`${'tile' + this.props.index}`}\n                className='border col-3 tile'\n                \n                onClick={() => this.props.onClick(this.props.index, actualLoc)}\n            >\n                <img style={myStyle} className='img' src={`${this.props.picture === null ? process.env.PUBLIC_URL + '/dale.svg' : this.props.picture}`}\n                ></img>\n                {this.props.index}\n            </div>\n        )\n    }\n}","import React from 'react'\nimport Tile from './tile'\n\n\nimport { UncontrolledAlert, Button, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nexport default class Gameboard extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            originalLocation: [],\n            currentLocation: [],\n            picture: null,\n            win: false\n        }\n        this.start = this.start.bind(this)\n        // this.shuffle = this.shuffle.bind(this)\n        this.result = this.result.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n        this.locationCheck = this.locationCheck.bind(this)\n        this.swapTiles = this.swapTiles.bind(this)\n        this.checkWin = this.checkWin.bind(this)\n        this.checkZero = this.checkZero.bind(this)\n        this.clearPic = this.clearPic.bind(this)\n    }\n    // When the page is rendered on the screen, I initialize the size of the board, create the index array used to tell the original location, and the currentLocation array used to map the divs. If there is a previous game already inplay, when the page reloads it rerenders on screen.\n    componentDidMount() {\n        let count = 0\n        var newCurrent = []\n        var subArr = []\n        var indexArr = []\n        let x\n        // checking for localStorage\n        if (localStorage.getItem('position') !== null) {\n            x = localStorage.getItem('position').split(',')\n            count = 0\n            for (let i = 0; i < this.props.rows; i++) {\n                for (let j = 0; j < this.props.columns; j++) {\n                    subArr.push(Number(x[count]))\n                    count++\n                }\n                newCurrent.push(subArr)\n                subArr = []\n            }\n        } else if (localStorage.getItem('position') === null) {\n            // build a 2D array, used as the board of the game.\n            for (let i = 0; i < this.props.rows; i++) {\n                for (let j = 0; j < this.props.columns; j++) {\n                    subArr.push(count)\n                    count++\n                }\n                newCurrent.push(subArr)\n                subArr = []\n            }\n            count = 0\n        }\n        // creating my win array\n        count = 0\n        for (let i = 0; i < this.props.rows; i++) {\n            for (let j = 0; j < this.props.columns; j++) {\n                subArr.push(count)\n                count++\n            }\n            indexArr.push(subArr)\n            subArr = []\n        }\n        this.setState({\n            originalLocation: indexArr,\n            currentLocation: newCurrent\n        })\n    }\n\n    componentDidUpdate() {\n        localStorage.setItem('position', this.state.currentLocation)\n    }\n    // my function for completing the image\n    result() {\n        // console.log('in the result function')\n        let count = 0\n        var subArr = []\n        var indexArr = []\n        for (let i = 0; i < this.props.rows; i++) {\n            for (let j = 0; j < this.props.columns; j++) {\n                subArr.push(count)\n                count++\n            }\n            indexArr.push(subArr)\n            subArr = []\n        }\n        this.setState({\n            currentLocation: this.state.originalLocation,\n            originalLocation: indexArr\n        })\n    }\n    // a function used in my shuffle function, used to find the position of the 0 index.\n    checkZero() {\n        let x = [...this.state.currentLocation]\n        let count = 0\n        for (let row = 0; row < x.length; row++) {\n            let subArr = x[row]\n            for (let col = 0; col < subArr.length; col++) {\n                let i = x[row][col]\n                if (i === 0) {\n                    return { row, col }\n                }\n            }\n        }\n    }\n    // function used to shuffle the picture, simulates a user click, by finding the index with zero, finding all possible moves, randomaly choosing a move, and switching the two tiles, repeated 100 times. \n    start() {\n        let count = 0\n        while (count < 50) {\n\n            let zero = this.checkZero()\n            let poss = this.locationCheck(zero)[2]\n            let random = Math.floor(Math.random() * poss.length)\n            let move = poss[random].toString()\n            // console.log(prevMove)\n            if (move === 'below') {\n                let zeroCheck = this.locationCheck(zero)\n                let bottomMove = zeroCheck[0]\n                // console.log(bottomMove)\n                let row = bottomMove.row + 1\n                let col = bottomMove.col\n                let loc = { row, col }\n                this.swapTiles(loc, bottomMove)\n            }\n            if (move === 'right') {\n                // console.log('right')\n                let zeroCheck = this.locationCheck(zero)\n                let bottomMove = zeroCheck[0]\n                let row = bottomMove.row\n                let col = bottomMove.col + 1\n                let loc = { row, col }\n                this.swapTiles(loc, bottomMove)\n                // console.log(loc)\n            }\n            if (move === 'above') {\n                // console.log('above')\n                let zeroCheck = this.locationCheck(zero)\n                let bottomMove = zeroCheck[0]\n                let row = bottomMove.row - 1\n                let col = bottomMove.col\n                let loc = { row, col }\n                this.swapTiles(loc, bottomMove)\n                // console.log(loc)\n            }\n            if (move === 'left') {\n                // console.log('left')\n                let zeroCheck = this.locationCheck(zero)\n                let bottomMove = zeroCheck[0]\n                let row = bottomMove.row\n                let col = bottomMove.col - 1\n                let loc = { row, col }\n                this.swapTiles(loc, bottomMove)\n                // console.log(loc)\n            }\n            count++\n        }\n    }\n    // count = 0\n\n    // checks the location of the specific tile, looks at all its possible moves, and switched tiles if allowed.\n    locationCheck(location) {\n        let y = location.row\n        let x = location.col\n        let posibilities = 0\n        let zeroLoc = location\n        let moves = []\n        // console.log({ col, row })\n        // if (index !== 0) {\n        if (y < this.props.rows - 1) {\n            // console.log('checking below')\n            posibilities++\n            moves.push('below')\n            if (this.state.currentLocation[y + 1][x] === 0) {\n                let row = (y + 1)\n                let col = (x)\n                let answer = ({ row, col })\n                zeroLoc = answer\n            }\n        }\n        if (y > 0) {\n            // console.log('checking above')\n            posibilities++\n            moves.push('above')\n            if (this.state.currentLocation[y - 1][x] === 0) {\n                let row = (y - 1)\n                let col = (x)\n                let answer = ({ row, col })\n                zeroLoc = answer\n            }\n        }\n        if (x > 0) {\n            // console.log('checking to the left')\n            posibilities++\n            moves.push('left')\n            if (this.state.currentLocation[y][x - 1] === 0) {\n                let row = (y)\n                let col = (x - 1)\n                let answer = ({ row, col })\n                zeroLoc = answer\n            }\n        }\n        if (x < this.props.columns - 1) {\n            // console.log('checking to the right')\n            moves.push('right')\n            posibilities++\n            if (this.state.currentLocation[y][x + 1] === 0) {\n                let row = (y)\n                let col = (x + 1)\n                let answer = ({ row, col })\n                zeroLoc = answer\n            }\n        }\n        // console.log(posibilities)\n        return (\n            [\n                zeroLoc,\n                posibilities,\n                moves\n            ]\n        )\n    }\n    // checks to see if the index array is equal to the current position array.\n    checkWin() {\n        let one = [...this.state.currentLocation]\n        let two = [...this.state.originalLocation]\n        let check = false\n        // console.log({one,two})\n        if (one.toString() === two.toString()) {\n            check = true\n        }\n        if (check === true) {\n            this.setState({\n                win: true\n            })\n        } else {\n            this.setState({\n                win: false\n            })\n        }\n\n        // swaps 2 selected tiles. \n    }\n    swapTiles(loc, zero) {\n        let zeroLoc = zero\n        // console.log(zeroLoc)\n        let current = [...this.state.currentLocation]\n        let temp = current[loc.row][loc.col]\n        current[loc.row][loc.col] = current[zeroLoc.row][zeroLoc.col]\n        current[zeroLoc.row][zeroLoc.col] = temp\n        // console.log(current)\n        this.setState({ currentLocation: current })\n    }\n    // click function put on every button\n    handleClick(index, location) {\n        // console.log({ index, location })\n        let zeroLocation = this.locationCheck(location)[0]\n        // console.log(zeroLocation)\n        if (zeroLocation === { row: 0, col: 0 }) {\n            // console.log(zeroLocation)\n            this.swapTiles(location, zeroLocation)\n        } else {\n            this.swapTiles(location, zeroLocation)\n            this.checkWin()\n        }\n    }\n    // changes the picture state when a user uploads a picture.\n    handleChange = (event) => {\n\n        let x = event.target.files[0]\n        // let url = URL.createObjectURL(event.target.files[0])\n        // console.log({x,url})\n        \n\n        this.setState({ picture : URL.createObjectURL(x)})\n    }\n    clearPic(){\n        this.setState({\n            picture:null\n        })\n    }\n\n    render() {\n        // console.log(this.state.currentLocation)\n        const alert = this.state.win ? <UncontrolledAlert className='hello' color=\"success\" fade={true}>Congrats you won! </UncontrolledAlert> : null\n\n        return (\n            <>\n                <div className='col-12 d-flex justify-content-around'>\n                    <input type=\"file\" onChange={this.handleChange} />\n                    <button onClick={this.clearPic}>Clear Picture</button>\n                </div>\n                <div className='col-12 p-0 d-flex justify-content-around'>\n                    {alert}\n                </div>\n                <div className='pt-3 d-flex justify-content-center container-fluid'>\n                    <div className='board row'>\n                        {this.state.currentLocation.map((row, rIndex) =>\n                            row.map((column, cIndex) =>\n                                <Tile width={this.props.columns} picture={this.state.picture} onClick={this.handleClick} index={row, column} key={row, column} row={rIndex} col={cIndex} />\n                            ))}\n                    </div>\n                </div>\n                <div className='offset-2 col-8 pt-3 pb-5 d-flex justify-content-around'>\n                    <Button onClick={this.start}>Start</Button>\n                    <Button onClick={this.result}>Complete</Button>\n                </div>\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Gameboard from './gameboard.js'\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <>\n        <h1 className='col-12 text-center display-3'>Slide-Puzzle</h1>\n        <div className='row'>\n          <Gameboard rows={4} columns={4} />\n        </div>\n      </>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}