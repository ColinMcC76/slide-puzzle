{"version":3,"sources":["components/tile.js","components/gameboard.js","components/App.js","index.js"],"names":["Tile","num","this","props","index","col","actualLoc","row","x","myStyle","marginTop","Math","floor","width","marginLeft","id","className","onClick","style","src","picture","process","React","Component","Gameboard","state","originalLocation","currentLocation","win","start","bind","result","handleClick","locationCheck","swapTiles","checkWin","checkZero","count","newCurrent","subArr","indexArr","localStorage","getItem","split","i","rows","j","columns","push","Number","setState","setItem","length","zero","poss","move","random","toString","bottomMove","loc","location","y","posibilities","zeroLoc","moves","one","two","check","current","temp","zeroLocation","undefined","event","target","value","alert","UncontrolledAlert","color","fade","FormGroup","Label","for","Input","onChange","handleChange","type","name","FormText","map","rIndex","column","cIndex","key","Button","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e38af09.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css';\n\n\nexport default class Tile extends React.Component {\n    render() {\n\n        const num = this.props.index\n        const col = this.props.col\n        const row = this.props.row\n        const actualLoc = { row, col }\n        let x =num % 4\n        let y = Math.floor(num/this.props.width)\n        const imgY = y * -100\n        const imgX = x * -100\n        const myStyle = {\n            marginTop: imgY,\n            marginLeft: imgX\n        }\n        return (\n            <div\n                id={`${'tile' + this.props.index}`}\n                className='border col-3 tile'\n                \n                onClick={() => this.props.onClick(this.props.index, actualLoc)}\n            >\n                <img style={myStyle} className='img' src={`${this.props.picture === '' ? process.env.PUBLIC_URL + '/dale.svg' : this.props.picture}`}></img>\n                {this.props.index}\n            </div>\n        )\n    }\n}","import React from 'react'\nimport Tile from './tile'\n\n\nimport { UncontrolledAlert, Button, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nexport default class Gameboard extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            originalLocation: [],\n            currentLocation: [],\n            picture: \"\",\n            win: false\n        }\n        this.start = this.start.bind(this)\n        this.result = this.result.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n        this.locationCheck = this.locationCheck.bind(this)\n        this.swapTiles = this.swapTiles.bind(this)\n        this.checkWin = this.checkWin.bind(this)\n        this.checkZero = this.checkZero.bind(this)\n    }\n\n    componentDidMount() {\n        let count = 0\n        var newCurrent = []\n        var subArr = []\n        var indexArr = []\n        let x\n        // checking for localStorage\n        if (localStorage.getItem('position') !== null) {\n            x = localStorage.getItem('position').split(',')\n            count = 0\n            for (let i = 0; i < this.props.rows; i++) {\n                for (let j = 0; j < this.props.columns; j++) {\n                    subArr.push(Number(x[count]))\n                    count++\n                }\n                newCurrent.push(subArr)\n                subArr = []\n            }\n        } else if (localStorage.getItem('position') === null) {\n            // build a 2D array, used as the board of the game.\n            for (let i = 0; i < this.props.rows; i++) {\n                for (let j = 0; j < this.props.columns; j++) {\n                    subArr.push(count)\n                    count++\n                }\n                newCurrent.push(subArr)\n                subArr = []\n            }\n            count = 0\n        }\n        // creating my win array\n        count = 0\n        for (let i = 0; i < this.props.rows; i++) {\n            for (let j = 0; j < this.props.columns; j++) {\n                subArr.push(count)\n                count++\n            }\n            indexArr.push(subArr)\n            subArr = []\n        }\n        this.setState({\n            originalLocation: indexArr,\n            currentLocation: newCurrent\n        })\n    }\n\n    componentDidUpdate() {\n        localStorage.setItem('position', this.state.currentLocation)\n    }\n    result() {\n        // console.log('in the result function')\n        let count = 0\n        var subArr = []\n        var indexArr = []\n        for (let i = 0; i < this.props.rows; i++) {\n            for (let j = 0; j < this.props.columns; j++) {\n                subArr.push(count)\n                count++\n            }\n            indexArr.push(subArr)\n            subArr = []\n        }\n        this.setState({\n            currentLocation: this.state.originalLocation,\n            originalLocation: indexArr\n        })\n    }\n    checkZero(){\n        let x = [...this.state.currentLocation]\n        let count = 0\n        // while(count < x.length){\n        //     count++\n        // }\n        for (let row = 0; row < x.length; row++) {\n            let subArr = x[row]\n            // console.log(y[i])\n            for (let col = 0; col < subArr.length; col++) {\n                let i = x[row][col]\n                if(i === 0){\n                    return {row,col}\n                }\n            }\n        }\n\n    }\n\n    start() {\n        let count = 0\n        while(count< 50){\n            let zero = this.checkZero()\n        let poss = this.locationCheck(zero)[2]\n        let random = Math.floor(Math.random() * poss.length)\n        let move = poss[random].toString()\n        if(move === 'below'){\n            // console.log('below')\n            let rndmMve = this.locationCheck(zero)\n            let bottomMove = rndmMve[0]\n            // console.log(bottomMove)\n            let row = bottomMove.row + 1\n            let col = bottomMove.col\n            let loc = {row,col}\n            this.swapTiles(loc,bottomMove)\n        }\n        if(move === 'right'){\n            // console.log('right')\n            let rndmMve = this.locationCheck(zero)\n            let bottomMove = rndmMve[0]\n            let row = bottomMove.row\n            let col = bottomMove.col+1\n            let loc = {row,col}\n            this.swapTiles(loc,bottomMove)\n            // console.log(loc)\n        }\n        if(move === 'above'){\n            // console.log('above')\n            let rndmMve = this.locationCheck(zero)\n            let bottomMove = rndmMve[0]\n            let row = bottomMove.row - 1\n            let col = bottomMove.col\n            let loc = {row,col}\n            this.swapTiles(loc,bottomMove)\n            // console.log(loc)\n        }\n        if(move === 'left'){\n            // console.log('left')\n            let rndmMve = this.locationCheck(zero)\n            let bottomMove = rndmMve[0]\n            let row = bottomMove.row \n            let col = bottomMove.col - 1\n            let loc = {row,col}\n            this.swapTiles(loc,bottomMove)\n            // console.log(loc)\n        }\n        count++\n        }\n        count = 0\n    }\n\n    locationCheck(location) {\n        let y = location.row\n        let x = location.col\n        let posibilities = 0\n        let zeroLoc = location\n        let moves = []\n        // console.log({ col, row })\n        // if (index !== 0) {\n            if (y < this.props.rows - 1) {\n                // console.log('checking below')\n                posibilities++\n                moves.push('below')\n                if (this.state.currentLocation[y + 1][x] === 0) {\n                    let row = (y + 1)\n                    let col = (x)\n                    let answer = ({ row, col})\n                    zeroLoc = answer\n                }\n            }\n            if (y > 0) {\n                // console.log('checking above')\n                posibilities++\n                moves.push('above')\n\n                if (this.state.currentLocation[y - 1][x] === 0) {\n                    let row = (y - 1)\n                    let col = (x)\n                    let answer = ({ row, col })\n                    zeroLoc = answer\n                }\n            }\n            if (x > 0) {\n                // console.log('checking to the left')\n                posibilities++\n                moves.push('left')\n                if (this.state.currentLocation[y][x - 1] === 0) {\n                    let row = (y)\n                    let col = (x - 1)\n                    let answer = ({ row, col })\n                    zeroLoc = answer\n                }\n            }\n            if (x < this.props.columns - 1) {\n                // console.log('checking to the right')\n                moves.push('right')\n                posibilities++\n                if (this.state.currentLocation[y][x + 1] === 0) {\n                    let row = (y)\n                    let col = (x + 1)\n                    let answer = ({ row, col })\n                    zeroLoc = answer\n                }\n            }\n            // console.log(posibilities)\n            return (\n                [\n                    zeroLoc,\n                    posibilities,\n                    moves\n                ]\n                )\n        // }\n\n    }\n    checkWin() {\n        let one = [...this.state.currentLocation]\n        let two = [...this.state.originalLocation]\n        let check = false\n        // console.log({one,two})\n        if (one.toString() === two.toString()) {\n            check = true\n        }\n        if (check === true) {\n            this.setState({\n                win: true\n            })\n        } else {\n            this.setState({\n                win: false\n            })\n        }\n\n\n    }\n    swapTiles(loc, zero) {\n        let zeroLoc = zero\n        // console.log(zeroLoc)\n        let current = [...this.state.currentLocation]\n        let temp = current[loc.row][loc.col]\n        current[loc.row][loc.col] = current[zeroLoc.row][zeroLoc.col]\n        current[zeroLoc.row][zeroLoc.col] = temp\n        // console.log(current)\n        this.setState({ currentLocation: current })\n    }\n\n    handleClick(index, location) {\n        // console.log({ index, location })\n        let zeroLocation = this.locationCheck(location, index)[0]\n        // console.log(zeroLocation)\n        if (zeroLocation !== undefined) {\n            // console.log(zeroLocation)\n            this.swapTiles(location, zeroLocation)\n            this.checkWin()\n        }\n    }\n\n    handleChange(event) {\n        this.setState({\n            picture: event.target.value\n        })\n        // console.log(event.target.value)\n    }\n\n    render() {\n        // console.log(this.state.currentLocation)\n        const alert = this.state.win ? <UncontrolledAlert className='hello' color=\"success\" fade={true}>Congrats you won!</UncontrolledAlert> : null\n\n        return (\n            <>\n                <div className='offset-4 col-4'>\n                    <FormGroup>\n                        <Label for=\"exampleFile\">File</Label>\n                        <Input className='btn btn-light' value={this.state.picture} onChange={event => this.handleChange(event)} type=\"file\" name=\"file\" id=\"exampleFile\" />\n                        <FormText color=\"muted\">\n                            Choose your own picture!\n                    </FormText>\n                    </FormGroup>\n                </div>\n                <div className='col-12 p-0 d-flex justify-content-around'>\n                    {alert}\n                </div>\n                <div className='d-flex justify-content-center container-fluid'>\n                    <div className='board row'>\n                        {this.state.currentLocation.map((row, rIndex) =>\n                            row.map((column, cIndex) =>\n                                <Tile width={this.props.columns} picture={this.state.picture} onClick={this.handleClick} index={row, column} key={row, column} row={rIndex} col={cIndex} />\n                            ))}\n                    </div>\n                </div>\n                <div className='offset-2 col-8 pt-3 pb-5 d-flex justify-content-around'>\n                    <Button onClick={this.start}>Start</Button>\n                    <Button onClick={this.result}>Complete</Button>\n                </div>\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Gameboard from './gameboard.js'\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <>\n        <h1 className='col-12 text-center display-3'>Slide-Puzzle</h1>\n        <div className='row'>\n          <Gameboard rows={4} columns={4} />\n        </div>\n      </>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}